swagger: "2.0"
info:
  description: "REST API for a restaurant that allows to register, cancel, modify and obtain information about a data structure that could be consumed by a customer."
  version: "1.0.0"
  title: "Delilah Rest√≥"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "lucasgarciabertaina@gmail.com"
  license:
    name: "MIT"
    url: "https://www.mit.edu/~amini/LICENSE.md"
host: "localhost"
basePath: "/v1"
tags:
  - name: "user"
    description: "Operations about user"
  - name: "order"
    description: "Operations about orders on delilah"
schemes:
  - "http"
paths:
  /register:
    post:
      tags:
        - "user"
      summary: "Create user"
      description: "To log in for the first time, you need to register first"
      operationId: "createUser"
      parameters:
        - in: "body"
          name: "body"
          description: "Created user object"
          required: true
          schema:
            $ref: "#/definitions/Register"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
        - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created user object"
          required: true
          schema:
            $ref: "#/definitions/Login"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
        - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
        - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
        - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid token supplied"
        "404":
          description: "User not found"
      security:
        - api_key: []
  /orders:
    get:
      tags:
        - "order"
      summary: "Get all orders from the user"
      description: ""
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Orders"
        "400":
          description: "Invalid order supplied"
        "404":
          description: "Order not found"
      security:
        - api_key: []
  /order:
    post:
      tags:
        - "order"
      summary: "Post order with menu"
      description: ""
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created user object"
          required: true
          schema:
            $ref: "#/definitions/Order"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid order supplied"
        "404":
          description: "Order not found"
      security:
        - api_key: []
  /order/{orderId}:
    get:
      tags:
        - "order"
      summary: "Get an specific order"
      description: ""
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "orderId"
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"

        "400":
          description: "Invalid order supplied"
        "404":
          description: "Order not found"
      security:
        - api_key: []
    put:
      tags:
        - "order"
      summary: "Modify order with menu"
      description: ""
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "orderId"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/Order"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid order supplied"
        "404":
          description: "Order not found"
      security:
        - api_key: []
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Register:
    type: "object"
    properties:
      username:
        type: "string"
      fullname:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      direction:
        type: "string"
      password:
        type: "string"
    xml:
      name: "User"
  Orders:
    type: "object"
    properties:
      orders:
        type: "array"
        items:
          type: "object"
          properties:
            orderId:
              type: "string"
            plates:
              type: "array"
              items:
                type: "object"
                properties:
                  name:
                    type: "string"
                  price:
                    type: "string"
            state:
              type: "string"
            payment:
              type: "string"
            direction:
              type: "string"
            userData:
              type: "object"
              properties:
                fullname:
                  type: "string"
                username:
                  type: "string"
                email:
                  type: "string"
                phone:
                  type: "string"
    xml:
      name: "Order"
  Order:
    type: "object"
    properties:
      orderId:
        type: "string"
      plates:
        type: "array"
        items:
          type: "object"
          properties:
            name:
              type: "string"
            price:
              type: "string"
      state:
        type: "string"
      payment:
        type: "string"
      direction:
        type: "string"
      userData:
        type: "object"
        properties:
          fullname:
            type: "string"
          username:
            type: "string"
          email:
            type: "string"
          phone:
            type: "string"
    xml:
      name: "Order"
  Login:
    type: "object"
    properties:
      username:
        type: "string"
      password:
        type: "string"
    xml:
      name: "User"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
